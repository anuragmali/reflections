What happens when you initialize a repository? Why do you need to do it?
	- when I initialize a git repository using git init command, that normal directory becomes
	the git repository. A file named ".git" is created. This file contains the metadata about
	repository and all commits.
	- We need to initialize repository so that we can use it as git repositry and keep track of
	all the files, commits, changes made to all files in that directory

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	-  staging area is different from repository in a sense that it acts as cache for repository.
	Files from staging area are not saved to repository untill commit.
	- staging are is different from working directory because it saves the changes temporarily.
	working directory may have untracked files but files from staging area are always tracked.

How can you use the staging area to make sure you have one commit per logical
change?
	- after making so many changes in working directory, I can comapre files in staging area
	and in working directory using "git diff". Because of this it becomes easy to know what changes you have made
	and we can add files which are related to one logical change to staging area.
	- If we already add all changed files to staging area, we can comapre staging area with most recent commit
	using "git diff -staged". and we can remove files from staging area which are not related to one logical change using 
	"git reset <file name>". And then we can commit the changes.
	
What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	- There can be a situation where we may want to check some feature and we are not sure about it.
	Also at the same timme we want to carry on the development in original project
	In this case we can create a seperate branch from main branch to try that feature/ experiment
	- branch can help us to perform our experiment without interfering to our original work.
	
How do the diagrams help you visualize the branch structure?
	- diagram shows pictorial representation of where exactly branch is created. How we checkout the branch
	and how commits are added to the branch we have checked out at the time of commit
	- Diagram is also helpful to understand why new commits are lost when they are made after checking out on one of the
	previous commit. This is also useful to know how we can preserve that commit by creating new branch at that point.
	- Diagram is also helpful to understand the merge 

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	- merging the branch together will create a new commit with all chnages merged from the commits at the tip
	of the branches we are merging
	- in merge process, git compares the two commits at the tip of the branch with the commit just before creating
	these branch.
	- it keeps the chnages which are explicitly added by some user. It removes the changes which are explicitely removed
	by some user and it merge the specified brnaches with the branch curently checked out
	- we represent it in diagram because pictorial representaion gives us more idea about the creation of branches and purpose 
	of changes made in branches
	
What are the pros and cons of Git's automatic merging vs. always doing merges
manually?